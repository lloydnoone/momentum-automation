// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Spoonobi

//@version=5
strategy("Momentum strategy", 
 overlay=true, 
 process_orders_on_close=true, 
 calc_on_every_tick=true,
 initial_capital=1000,
 default_qty_type=strategy.percent_of_equity, 
 default_qty_value=90, 
 commission_type=strategy.commission.cash_per_contract, 
 commission_value=0.005
 )

var bool flagBaseFound = false
var bool lookForEntry = false
var int barsSinceFlagTop = 0
var float targetPercentage = 7.0
var float retracementPercentage = 40.0
var float maxRetracementPoint = 0.0
var int maxFlagLength = 8
var float trailPercent = 0.08
var bool exceededMaxRetracement = false
var float bottomOfFlag = 0.0
var float stopLevel = 0.0

vwap = ta.vwap(open)
barsSinceRed = ta.barssince(close < open)

findFlagPole(percentGain) =>
    float overallGain = 0.0
    float redClose = 0.0
    // if the candle is green, get previous run of green candles
    if (close > open)
        // get close of most recent red candle
        redClose := close[barsSinceRed]

        // red candle found, calc gain using candle after it to current
        overallGain := close - open[barsSinceRed - 1]
    
        // calc 10 percent
        tenPercent = (redClose / 100) * percentGain

        // get flag base index
        flagBase = bar_index - (barsSinceRed-1)

        // return result [foundPole, gain, flagBase, flagTop]
        if (overallGain >= tenPercent)
            [true, overallGain, flagBase]
        else
            [false, overallGain, flagBase]
    else // current is red candle
        [false, overallGain, 0]

findBullFlagEntry() =>
    // enter if current close is higher than previous high and we're above vwap
    if close > high[1] and close > vwap
        label.new(bar_index, high, 'bull flag entry', yloc=yloc.abovebar, style=label.style_arrowdown, color=color.green, textcolor=color.white)
        true
    else
        false

labelFlagTop(float gain) =>
    flagTopLabel = array.get(label.all, 0)
    label.set_xy(flagTopLabel, bar_index, high)
    label.set_text(flagTopLabel, str.format('flag top {0}',gain))

labelFlagBase(int flagBase, float gain) =>
    flagTopLabel = label.new(bar_index, high, str.format('flag top {0}',gain), yloc=yloc.abovebar, style=label.style_arrowdown, color=color.green, textcolor=color.white)
    flagBaseLabel = label.new(flagBase, low, 'flag base', yloc=yloc.belowbar, style=label.style_arrowup, color=color.green, textcolor=color.white)

calculateMaxRetracementPoint(int flagBase) =>
    // find the diff between flag base and top
    diff = high - low[bar_index - flagBase]
    // return retracement point
    high - ((retracementPercentage/100) * diff)

checkMaxRetracement() =>
    // calculate lowest in flag
    lowestInFlag = low
    for idx = 0 to barsSinceFlagTop - 1
        if low[idx] < lowestInFlag
            lowestInFlag := low[idx]
    if lowestInFlag < maxRetracementPoint
        // if any candles from flag top to current candle drawdown 50% of the pole, dont even consider entering
        log.info('no entry because of maxRetracementPoint')
        true
    else
        false

isVolumeGood() =>
    // make sure the candle after most recent red bar had higher volume
    if barsSinceRed > 0
        redVolume = volume[barsSinceRed]
        greenVolume = volume[barsSinceRed - 1]

        // return bool
        greenVolume > redVolume
    else
        false

getBottomOfFlag() =>
    bottom = 999999.999
    for i = 0 to barsSinceFlagTop - 1
        bottom := low[i] < bottom ? low[i] : bottom
    // get lowest bar in flag
    log.info('bottom: {0}', bottom)
    // return flag bottom
    bottom

calculateStopLoss(float prevStopLoss) =>
    movement = close > close[1] ? close - close[1] : 0
    log.info('movement: {0}', movement)
    log.info('tsl {0}', prevStopLoss + movement)
    prevStopLoss + movement

if strategy.position_size == 0
    // if candle is now red stop looking for pole and look for entry
    if (close < open and flagBaseFound and lookForEntry == false)
        lookForEntry := true
        
    // if not looking for entry, start looking for flag
    if (lookForEntry == false)
        [foundPole, gain, flagBase] = findFlagPole(percentGain = targetPercentage)
        if (foundPole)
            maxRetracementPoint := calculateMaxRetracementPoint(flagBase)
            //if a flag base was already found move flag top labels
            if (flagBaseFound)
                labelFlagTop(gain)
            // if a base was not found, we now have one, set label for it
            else
                labelFlagBase(flagBase, gain)
                flagBaseFound := true

    // flag found, look for entry
    else if (flagBaseFound and lookForEntry and strategy.position_size <= 0)
        barsSinceFlagTop := barsSinceFlagTop + 1
        //wait for dip after flag base to enter
        if (barsSinceFlagTop > 1 and barsSinceFlagTop < maxFlagLength)
            log.info('barsSinceFlagTop: {0}', barsSinceFlagTop)
            // bullflag found already, now find entry
            exceededMaxRetracement := checkMaxRetracement()
            if exceededMaxRetracement == false
                if (isVolumeGood() and findBullFlagEntry())
                    bottomOfFlag := getBottomOfFlag()
                    strategy.entry("Long Entry", strategy.long)
        // entry found or took too long, reset and look for next flag
        if (barsSinceFlagTop >= maxFlagLength or strategy.position_size > 0 or exceededMaxRetracement)
            flagBaseFound := false
            lookForEntry := false
            barsSinceFlagTop := 0
            maxRetracementPoint := 0.0
            exceededMaxRetracement := false
            bottomOfFlag := 0.0

// calculate trailing stop loss price
//long_tsl = close * (1 - trailPercent)

// check and update the stop loss depending on price movement
// long_stop_price = 0.0
// long_stop_price := strategy.position_size > 0 ? math.max(long_tsl, long_stop_price[1]) : 0

//place the exit order
if strategy.position_size > 0
    // reset current stop to zero to recalculate
    stopLevel := 0.0

    // move trailing stop to either bottomOfFlag or + pricemovement
    tsl = math.max(bottomOfFlag, calculateStopLoss(stopLevel[1])) 
    // close at either trailing stop or below vwap, whichever is first.
    stopLevel := tsl > vwap ? tsl : vwap
    strategy.exit("Long Entry", stop=stopLevel)

// plot the TSL levels
plot(series=strategy.position_size > 0 ? stopLevel : na, color=#feae00, style=plot.style_line, linewidth=3)
plot(series=strategy.position_size > 0 ? bottomOfFlag : na, color=#fe0000, style=plot.style_line, linewidth=3)



// plotshape(
//  result,
//  title='entry',
//  location =location.belowbar, 
//  color=color.green, style=shape.triangleup, 
//  text='flag base', 
//  textcolor=color.white)

// longCondition = ta.crossover(ta.sma(close, 14), ta.sma(close, 28))
// if (longCondition)
//     strategy.entry("My Long Entry Id", strategy.long)

// shortCondition = ta.crossunder(ta.sma(close, 14), ta.sma(close, 28))
// if (shortCondition)
//     strategy.entry("My Short Entry Id", strategy.short)

plot(vwap)
